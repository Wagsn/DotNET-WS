<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ assembly name="$(ProjectDir)lib\\MySql.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#+
    public class EntityHelper
    {
		public static string[] maxLengthTypes=new string[]{"varchar"};

        public static List<Entity> GetEntities(string connectionString, List<string> databases)
        {
            var list = new List<Entity>();
            var conn = new MySqlConnection(connectionString);
            try
            {
                conn.Open();
                var dbs = string.Join("','", databases.ToArray());
                var cmd = string.Format(@"SELECT `information_schema`.`COLUMNS`.`TABLE_SCHEMA`
											,`information_schema`.`COLUMNS`.`TABLE_NAME`
											,`information_schema`.`TABLES`.`TABLE_COMMENT`
											,`information_schema`.`COLUMNS`.`COLUMN_NAME`
											,`information_schema`.`COLUMNS`.`DATA_TYPE`
											,`information_schema`.`COLUMNS`.`COLUMN_COMMENT`
											,`information_schema`.`COLUMNS`.`IS_NULLABLE`
											,`information_schema`.`COLUMNS`.COLUMN_KEY
											,`information_schema`.`COLUMNS`.CHARACTER_MAXIMUM_LENGTH
										FROM `information_schema`.`TABLES`, `INFORMATION_SCHEMA`.`COLUMNS`
										WHERE `information_schema`.`COLUMNS`.`TABLE_NAME` = `information_schema`.`TABLES`.`TABLE_NAME`
										AND `information_schema`.`TABLES`.`TABLE_SCHEMA` IN ('{0}') ", dbs);
                using (var reader = MySqlHelper.ExecuteReader(conn, cmd))
                {
                    while (reader.Read())
                    {
                        var db = reader["TABLE_SCHEMA"].ToString();
                        var table = reader["TABLE_NAME"].ToString();
						var tableComment = reader["TABLE_COMMENT"].ToString();
                        var column = reader["COLUMN_NAME"].ToString();
                        var type =  reader["DATA_TYPE"].ToString();
						var dbType = reader["DATA_TYPE"].ToString();
                        var comment = reader["COLUMN_COMMENT"].ToString();
						var isNull = reader["IS_NULLABLE"].ToString();
						var isKey = reader["COLUMN_KEY"].ToString();
						var maxLenth = reader["CHARACTER_MAXIMUM_LENGTH"].ToString();
                        var entity = list.FirstOrDefault(x => x.EntityName == table);
                        if(entity == null)
                        {
                            entity = new Entity(){ EntityName = table, Comment = tableComment, DatabaseName = db, };
                            entity.Fields.Add(new Field
                            {
                                Name = column,
                                Type = GetCLRType(type),
                                Comment = comment,
								IsNull = "YES" == isNull,
								MaxLength = maxLengthTypes.Contains(type) ? maxLenth : "",
								IsKey= isKey == "PRI",
								DbType = dbType
                            });
                            
                            list.Add(entity);
                        }
                        else
                        {
                            entity.Fields.Add(new Field
                            {
                                Name = column,
                                Type = GetCLRType(type),
                                Comment = comment,
								IsNull = "YES" == isNull,
								MaxLength = maxLengthTypes.Contains(type)?maxLenth:"",
								IsKey = isKey =="PRI",
								DbType = dbType
                            });
                        }
                    }
                }
            }
            finally
            {
                conn.Close();
            }

            return list;
        }

        public static string GetCLRType(string dbType)
        {
            switch(dbType)
            {
                case "tinyint":
                case "smallint":
                case "mediumint":
                case "int":
                case "integer":
                    return "int";
                case "double":
                    return "double";
                case "float":
                    return "float";
                case "decimal":
                    return "decimal";
                case "numeric":
                case "real":
                    return "decimal";
                case "bit":
                    return "bool";
                case "date":
                case "time":
                case "year":
                case "datetime":
                case "timestamp":
                    return "DateTime";
                case "tinyblob":
                case "blob":
                case "mediumblob":
                case "longblog":
                case "binary":
                case "varbinary":
                    return "byte[]";
                case "char":
                case "varchar":                    
                case "tinytext":
                case "text":
                case "mediumtext":
				case "longblob":
                case "longtext":
                    return "string";
				case "bigint":
                    return "long";
                case "point":
                case "linestring":
                case "polygon":
                case "geometry":
                case "multipoint":
                case "multilinestring":
                case "multipolygon":
                case "geometrycollection":
                case "enum":
                case "set":
                default:
                    return dbType;
            }
        }
    }

    public class Entity
    {
        public Entity()
        {
            this.Fields = new List<Field>();
        }

        public Entity(string name)
            : this()
        {
            this.EntityName = name;
        }
		
        public Entity(string name, string comment)
            : this(name)
        {
            this.EntityName = name;
			this.Comment = comment;
        }

		public string DatabaseName { get;set; }
        public string EntityName { get;set; }
        public string Comment { get;set; }
        public List<Field> Fields { get;set; }
		public List<Field> KeyFields { get { return Fields.Where(m => m.IsKey).ToList(); } }
		public List<Field> NotKeyFields { get { return Fields.Where(m => !m.IsKey).ToList(); } }
		public bool MoreKey { get { return KeyFields.Count >= 1;}}		
    }

    public class Field
    {
        public string Name { get;set; }
        public string Type { get;set; }
		public string DbType { get;set; }
        public string Comment { get;set; }
		public bool IsNull { get;set; }
		public string MaxLength { get;set; }
		public bool IsKey{ get;set; }
    }
#>