<#@ template debug="false" hostspecific="true" language="C#"#>
<#@ include file="$(ProjectDir)Include\\MysqlManager.ttinclude"#>
<#@ include file="$(ProjectDir)Include\\MysqlDbhelper.ttinclude"#>
<#@ include file="$(ProjectDir)Include\\DbHelper.ttinclude"#>
<# 
    // 数据库连接
    var connectionString = @"server=127.0.0.1;uid=root;pwd=123456;";

    // 需要解析的数据库
    var database = new List<string> { "ws_unified_subject" };
	// 默认命名空间
	var nameSpace = "PermissionCenter.Stores";
	var entityNameSpace = "PermissionCenter.Entitis";
	var dbContextName = "Application";
	var className = "ApplicationDbContext";
	// 不需要生成的表名
    var notTables = new List<string> { "" };

	//可空的对象需要增加 ? 
	var nullTypes = new List<string> { "bool", "int","long","double","float","decimal","DateTime" };

    // 文件版权信息
    var version = "2.0";
    var author = "T4 自动生成";

    var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("ApplicationDbContext.cs");
#>
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Internal;
using <#=entityNameSpace#>;

namespace <#=nameSpace#> 
{
    public class <#=className#> : DbContext 
	{
        public <#=className#>(DbContextOptions<<#=className#>> options) : base(options) { }

<#
    var entities = EntityHelper.GetEntities(connectionString, database);
	foreach(Entity entity in entities)
    {
		if(notTables.Contains(entity.EntityName)) 
			continue;
		var entityName = DbHelper.ConvertColumnName(entity.EntityName);
#>
        /// <summary>
        /// <#=(string.IsNullOrEmpty(entity.Comment)?($"{entityName} Entity Model"):entity.Comment.Replace("\r\n","\r\n\t\t/// "))#>
	    /// from "<#=entity.EntityName#>" table, "<#=entity.DatabaseName#>" database.
        /// </summary>
        public DbSet<<#= DbHelper.ConvertColumnName(entity.EntityName) #>> <#= DbHelper.HandlerEFTableName(entity.EntityName) #> { get; set; }
<#
	}
#>
        
		protected override void OnModelCreating(ModelBuilder builder) {
            base.OnModelCreating(builder);
<#
	foreach(Entity entity in entities)
    {
		if(notTables.Contains(entity.EntityName)) 
			continue;
		var entityName = DbHelper.ConvertColumnName(entity.EntityName);
#>
			builder.Entity<<#= entityName #>>(b => 
			{
				<#= entity.MoreKey?DbHelper.HandlerEFMoreKey(entity.KeyFields):"" #>
<#
			foreach(var field  in entity.Fields)
			{
#>
                b.Property(e => e.<#=DbHelper.ConvertColumnName(field.Name)#>)<#=field.IsNull?"":".IsRequired()"#><#= string.IsNullOrEmpty(field.MaxLength)?"":(".HasMaxLength("+field.MaxLength+")") #>;
<#						
			}
#>
			});
<#
	}
#>
		}

        public override int SaveChanges(bool acceptAllChangesOnSuccess) {
            OnBeforeSaving();
            return base.SaveChanges(acceptAllChangesOnSuccess);
        }

        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken)) {
            OnBeforeSaving();
            return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        }

        private void OnBeforeSaving() {

        }
    }
}
<#
	manager.EndBlock(); 
    manager.Process(true);
#>